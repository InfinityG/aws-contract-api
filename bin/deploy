#!/usr/bin/env node

var Promise = require('bluebird')
  , format = require('util').format
  , fs = require('fs')
  , readFile = Promise.promisify(fs.readFile)
  , stat = Promise.promisify(fs.stat)
  , ini = require('ini')
  , osenv = require('osenv')
  , dotenv = require('dotenv')
  , dotenvSafe = require('dotenv-safe')
  , sep = require('path').sep
  , home = osenv.home()
  , user = osenv.user()
  , credfile = home + sep + '.aws' + sep + 'credentials'
  , userenvfile = '.env.' + user
  , awscreds
  , deployuser
  , deploycreds
  , AwsDeploy = require('aws-deploy')
  ;


stat(credfile)

.then(function() {
  return readFile(credfile);
})

.then(function(credfileContent) {
  awscreds = ini.parse(credfileContent.toString());
})

.then(function() {
  return stat(userenvfile)
})

.then(function() {
  dotenv.load();
  dotenvSafe.config({path: userenvfile});
  dotenvSafe.load();
})

.then(function() {
  deployuser = process.env.AWS_USER;
  if (deployuser == '') throw new Error('empty DEPLOY_USER var')

  deploycreds = awscreds[deployuser];
  if (!deploycreds) throw new Error(format('[%s] not in %s', deployuser, credfile));
  if (!deploycreds.aws_access_key_id) throw new Error(format('[%s] has no aws_access_key_id in %s', deployuser, credfile));
  if (!deploycreds.aws_secret_access_key) throw new Error(format('[%s] has no aws_secret_access_key in %s', deployuser, credfile));
})

.then(function() {
  var config = {
    aws_account: process.env.ALT_AWS_ACCOUNT || process.env.AWS_ACCOUNT,
    aws_region: process.env.AWS_REGION,
    aws_access_key_id: deploycreds.aws_access_key_id,
    aws_secret_access_key: deploycreds.aws_secret_access_key,
  };

  var api = require('../api');

  return AwsDeploy(config, api);
})

.catch(function(e) {
  console.error(e.stack);
  if (e._response) {
    console.error('\nResponse: ' + JSON.stringify(e._response, null, 2));
  }
  process.exit(e.errno || 1);
})

.finally(function() {})
