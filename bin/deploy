#!/usr/bin/env node

var commander = require('commander')
  , Promise = require('bluebird')
  , format = require('util').format
  , fs = require('fs')
  , readFile = Promise.promisify(fs.readFile)
  , writeFile = Promise.promisify(fs.writeFile)
  , stat = Promise.promisify(fs.stat)
  , ini = require('ini')
  , osenv = require('osenv')
  , dotenvSafe = require('dotenv-safe')
  , sep = require('path').sep
  , normalize = require('path').normalize
  , dirname = require('path').dirname
  , relative = require('path').relative
  , home = osenv.home()
  , user = osenv.user()
  , credfile = home + sep + '.aws' + sep + 'credentials'
  , userenvfile
  , sampleenvfile = normalize(__dirname + '/../.env.sample')
  , mkdirp = Promise.promisify(require('mkdirp'))
  , awscreds
  , deployuser
  , deploycreds
  , AwsDeploy
  , apiFile
  , deployResultFile
  ;

var program = commander
.option('')
.option('--env [alt]',          'Load .env.[alt] instead of .env.$USER')
.option('')
.option('--production',         'Deploy into production stage')
.option('--development',        'Deploy into development stage')
.option('--test',               'Deploy into test stage')
.option('--stage [customName]', 'Deploy into customNamed stage')
.option('')
.option('--silent',             'No debug messages')
.option('--debug',              'All debug messages')
.option('')
.parse(process.argv);

var stage = 'development';

if (program.production) stage = 'production';
if (program.development) stage = 'development';
if (program.test) stage = 'test';
if (program.stage) stage = program.stage;

if (program.silent) delete process.env.DEBUG
else if (program.debug && !process.env.DEBUG) process.env.DEBUG = '*'
else if (!process.env.DEBUG) process.env.DEBUG = 'deploy,Deployer*';

if (program.env) user = program.env;

userenvfile = normalize(__dirname + '/../.env.' + user)

AwsDeploy = require('aws-deploy');
debug = require('debug')('Deployer');

apiFile = __dirname + '/../api.js';

stat(credfile)

.then(function() {
  return readFile(credfile);
})

.then(function(credfileContent) {
  awscreds = ini.parse(credfileContent.toString());
})

.then(function() {
  return stat(userenvfile)
})

.then(function() {
  dotenvSafe.config({path: userenvfile});
  dotenvSafe.load();
})

.then(function() {
  deployuser = process.env.AWS_USER;
  if (deployuser == '') throw new Error('empty DEPLOY_USER var')

  deploycreds = awscreds[deployuser];
  if (!deploycreds) throw new Error(format('[%s] not in %s', deployuser, credfile));
  if (!deploycreds.aws_access_key_id) throw new Error(format('[%s] has no aws_access_key_id in %s', deployuser, credfile));
  if (!deploycreds.aws_secret_access_key) throw new Error(format('[%s] has no aws_secret_access_key in %s', deployuser, credfile));
})

.then(function() {
  var config = {
    aws_account: process.env.AWS_ACCOUNT,
    aws_region: process.env.AWS_REGION,
    aws_access_key_id: deploycreds.aws_access_key_id,
    aws_secret_access_key: deploycreds.aws_secret_access_key,

    deploy_stage: stage,
  };

  var api = require(apiFile);
  var previousDeployResult;
  deployResultFile = normalize(__dirname + '/../.deployed/' + stage + '_' + api.version + '/api.json');

  try {
    previousDeployResult = require(deployResultFile);
  } catch (e) {
    // no problem, no previous deployment result present
  }

  return AwsDeploy(config, api, previousDeployResult);
})

.then(function(deployResult) {

  mkdirp(dirname(deployResultFile))
  .then(function() {
    debug('write %s', relative(process.cwd(), deployResultFile));
    return writeFile(deployResultFile, JSON.stringify(deployResult, null, 2));
  });
})

.catch(function(e) {
  if (e.stack) console.error(e.stack)
  else console.error(e.toString());
  if (e._response) {
    console.error('\nResponse: ' + JSON.stringify(e._response, null, 2));
  }
  process.exit(e.errno || 1);
})

.finally(function() {})
