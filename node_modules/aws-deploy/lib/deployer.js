module.exports = Deployer;

var Promise = require('bluebird') // available from parent's modules
  , ApiGatewayApi = require('./aws/api_gateway_api')
  , diff = require('fast-json-patch').compare
  , Lambda = require('./lambda')
  , debug = require('debug')('Deployer') // available from parent's modules
  , updateApiResources = require('debug')('Deployer:updateApiResources')
  , updateApiResource = require('debug')('Deployer:updateApiResource')
  , createApiResources = require('debug')('Deployer:createApiResources')
  , createApiResource = require('debug')('Deployer:createApiResource')
  , deleteApiResourceMethod = require('debug')('Deployer:deleteApiResourceMethod')
  , updateApiResourceMethod = require('debug')('Deployer:updateApiResourceMethod')
  , createApiResourceMethod = require('debug')('Deployer:createApiResourceMethod')
  ;


/** 
 * ### .Deployer(config, apiTree)
 *
 * Update AWS Api
 *
 * @api public
 * @param {AwsConfig} config
 * @param {ApiTree} apiTree
 * @returns {Promise}
 *
 */

function Deployer(config, apiTree) {

  var apigw = new ApiGatewayApi(config);

  var found; // api already exists

  return new Promise(function(resolve, reject) {

    debug('deploying into stage: \'%s\'', config.deploy_stage);

    apigw.getRestApis().then(function(APIs) {

      APIs.forEach(function(api) {

        if (api.name == apiTree.name) found = api;

      });

    })

    .then(function() {

      if (found) {
        debug('updating api name: \'%s\', id: \'%s\'', found.name, found.id);
        return found;
      }

      debug('creating api name: \'%s\'', apiTree.name);
      return apigw.createRestApi({
        name: apiTree.name,
        description: apiTree.description,
      });

    })

    .then(function(awsRestApi) {
      
      return module.exports.updateApiResources(apigw, apiTree, awsRestApi);

    })

    .then(function(awsRestApi) {

      return module.exports.createApiResources(apigw, apiTree, awsRestApi);

    })

    .then(function() {

      // Deploy result contains the input apiTree ammended
      // with deployment details and the corresponding aws
      // object instances.

      resolve(apiTree);

    })

    .catch(reject)

  });
  
}


/**
 * List of 'methods' associated with an AWS Api Gateway resource
 *
 * @typedef AwsLinkRelations
 * @type {object}
 * @property {{href: string}} self - eg { self: { href: '/restapis/1hjovnyjw0' },
 * @property {{href: string, templated: boolean}} repeating method list - eg {'deployment:create': { href: '/restapis/1hjovnyjw0/deployments' },
 *
 */


/**
 * Instance of an AWS Api Gateway RestApi as returned from AWS
 * 
 * @typedef AwsRestApi
 * @type {object}
 * @property {string} id
 * @property {string} name
 * @property {string} description
 * @property {AwsLinkRelations} _links
 *
 */


/**
 * ### .updateApiResources(apigw, apiTree, api)
 *
 * Updates Api Resources ie. routes
 *
 * @api private
 * @param {ApiGatewayApi} apigw
 * @param {ApiTree} apiTree
 * @param {AwsRestApi} awsRestApi
 * @returns {Promise}
 *
 */

module.exports.updateApiResources = function(apigw, apiTree, awsRestApi) {

  return new Promise(function(resolve, reject) {

    apigw.getRestApiResources({
      id: awsRestApi.id
    })

    .then(function(resources) {

      Object.defineProperty(awsRestApi, 'resources', {value: resources}); // used in createApiResources()

      updateApiResources('found %d existing resource%s', resources.length, resources.length !== 1 ? 's' : '');

      // Process reversed so that if deleting any resources it does not
      // delete (eg) '/users' before '/users/{username}/drimbles/{colour}'
      // because that would error.

      var reversed = resources.sort(function(a, b) {
        if (a.path < b.path) return 1;
        if (b.path < a.path) return -1;
        return 0;
      });

      return Promise.map(reversed, function(awsResource) {
        return module.exports.updateApiResource(apigw, apiTree, awsResource);
      });

    })

    .then(function() {

      // Resolve with awsRestApi, for next promise

      resolve(awsRestApi);

    })

    .catch(reject);

  });

}

/**
 * ### .createApiResources(apigw, apiTree, awsRestApi)
 *
 * Create Api Resources not already present in awsRestApi
 *
 * @api private
 * @param {ApiGatewayApi} apigw
 * @param {ApiTree} apiTree
 * @param {AwsRestApi} awsRestApi
 * @returns {Promise}
 *
 */

module.exports.createApiResources = function(apigw, apiTree, awsRestApi) {

  return new Promise(function(resolve, reject) {

    createApiResources('api name: \'%s\'', awsRestApi.name);

    var createResourceSpec = function(path) {

      var pathParts = path.split('/');
      var pathPart = pathParts.pop();
      var parentPath = pathParts.length > 1 ? pathParts.join('/') : '/';

      return {
        path: path,
        pathPart: pathPart,
        parentPath: parentPath,
      }

    }

    var createList = Object.keys(apiTree.routes).filter(function(path) {

      // Filter out resources already present in awsRestApi

      return awsRestApi.resources.filter(function(resource) {
        return path == resource.path;
      }).length == 0;

    }).map(function(path) {

      return createResourceSpec(path);
      
    });

    createApiResources('creating %d new resource%s', createList.length, createList.length !== 1 ? 's' : '');

    if (createList.length == 0) return resolve();

    // Need to get fancy because the parent is needed to create the child
    // ie. can't create '/users/{user_id}' without '/users' being created first

    var accumulate = [];

    var recurse = function() {

      var parent, resource = createList.shift();

      if (!resource) {

        // None left in createList, all done. 
        // Update methods for all new resources in accumulated list.

        return Promise.map(accumulate, function(awsResource) {
          return module.exports.updateApiResource(apigw, apiTree, awsResource);
        }).then(resolve).catch(reject);

      }

      parent = apiTree.routes[resource.parentPath];

      // If parent is not defined then requeue resource AND parent, and retry

      if (!parent || !parent._aws_entity) {

        createList.unshift(resource);
        createList.unshift(createResourceSpec(resource.parentPath));
        return recurse();

      }

      createApiResource('path: \'%s\'', resource.path);

      apigw.createRestApiResource({pathPart: resource.pathPart}, parent._aws_entity)

      .then(function(result) {

        // Attach new aws entity to apiTree at resource location

        apiTree.routes[resource.path] = apiTree.routes[resource.path] || {};
        apiTree.routes[resource.path]._aws_entity = result;

        // Accumulate each created resource for update

        accumulate.push(result);
        recurse();

      })

      .catch(reject);

    }

    recurse()

  });

}


/**
 * Instance of an AWS Api Gateway RestApi resource as returned from AWS
 * 
 * @typedef AwsRestApiResource
 * @type {object}
 * @property {string} id
 * @property {string} parentId
 * @property {string} path
 * @property {string} pathPart
 * @property {AwsLinkRelations} _links
 *
 */


/**
 * ### .updateApiResource(apigw, apiTree, awsResource)
 *
 * Updates existing Api Resource ie. route
 *
 * @api private
 * @param {ApiGatewayApi} apigw
 * @param {ApiTree} apiTree
 * @param {AwsRestApiResource} awsResource
 * @returns {Promise}
 * 
 */

module.exports.updateApiResource = function(apigw, apiTree, awsResource) {

  updateApiResource('path: \'%s\'', awsResource.path);

  var allMethods = apiTree.getMethods(awsResource.path);

  if (!allMethods) {

    // getMethods() returns null if the path is not defined in apiTree
    // so here is an awsResource defined in AWS but not in the deploying
    // config, it should be deleted. 

    return apigw.deleteRestApiResource(awsResource);

  }

  // Attach aws entity to apiTree at resource location

  apiTree.routes[awsResource.path] = apiTree.routes[awsResource.path] || {};
  apiTree.routes[awsResource.path]._aws_entity = awsResource;

  // Delete methods on the awsResource that are not in the deploying config.

  return module.exports.deleteApiResourceMethods(apigw, apiTree, awsResource, allMethods)

  .then(function() {

    return Promise.map(allMethods, function(apiMethod) {

      // Update or add methods from deploying config into awsResource

      return module.exports.updateApiResourceMethod(apigw, apiTree, awsResource, apiMethod);

    });

  })

  .then(function() {

    // Mark resource (route) as deployed

    var deploy = apiTree.routes[awsResource.path]._deploy;

    if (!deploy) return;
    
    deploy.done = true;

    if (!deploy.created) {

      deploy.created = {
        at: new Date(),
        // by: process.env.AWS_USER, // git blame says who
      }

    }

  });

}


/**
 * ### .deleteApiResourceMethods(apigw, apiTree, awsResource)
 *
 * Delete methods from awsResource not present in apiTree
 *
 * @api private
 * @param {ApiGatewayApi} apigw
 * @param {ApiTree} apiTree
 * @param {AwsRestApiResource} awsResource
 * @param {ApiMethod[]} allMethods
 * @returns {Promise}
 *
 */

module.exports.deleteApiResourceMethods = function(apigw, apiTree, awsResource, allMethods) {

  var deleteList;

  try {

    deleteList = awsResource._links['resource:methods'];

    if (deleteList) {

      if (!Array.isArray(deleteList)) deleteList = [deleteList];

      // Filter for awsResource methods that don't exist in apiTree (allMethods)

      deleteList = deleteList.filter(function(method) {
        return allMethods.filter(function(m) {
          return m.method == method.name;
        }).length == 0;
      });

    }

    else deleteList = [];

  } catch (e) {

    debug('awsResource missing _links');
    deleteList = [];

  }

  return Promise.map(deleteList, function(methodLink) {

    return module.exports.deleteApiResourceMethod(apigw, awsResource, methodLink)

  });

}


/**
 * Instance of an AWS Api Gateway RestApi method as returned from AWS
 * 
 * @typedef AwsRestApiMethodLink
 * @type {object}
 * @property {string} href
 * @property {string} name
 * @property {string} title
 *
 */

/**
 * ### .deleteApiResourceMethod(apigw, apiTree, awsResource, method)
 *
 * Delete specific method from awsResource
 *
 * @api private
 * @param {ApiGatewayApi} apigw
 * @param {AwsRestApiResource} awsResource
 * @param {AwsRestApiMethodLink} method
 * @returns {Promise}
 *
 */

module.exports.deleteApiResourceMethod = function(apigw, awsResource, methodLink) {

  deleteApiResourceMethod('%j', methodLink);

  return apigw.deleteRestApiMethod(methodLink)

  .then(function() {

    // Remove method from resource listing

    if (Array.isArray(awsResource._links['resource:methods'])) {

      var remove = awsResource._links['resource:methods'].filter(function(m) {
        return methodLink.href != m.href;
      });

      if (remove.length == 1) awsResource._links['resource:methods'] = remove[0];
      else awsResource._links['resource:methods'] = remove;
    }

    else if (awsResource._links['resource:methods'].href == methodLink.href) {
      delete awsResource._links['resource:methods']
    }

  });

}


/**
 * ### .updateApiResourceMethod(apigw, apiTree, awsResource, apiMethod)
 *
 * Update method on the Api Gateway with method from the apiTree
 *
 * @api private
 * @param {ApiGatewayApi} apigw
 * @param {ApiTree} apiTree
 * @param {AwsRestApiResource} awsResource
 * @param {ApiMethod} apiMethod
 * @returns {Promise}
 *
 */

module.exports.updateApiResourceMethod = function(apigw, apiTree, awsResource, apiMethod) {

  var methodLinks = awsResource._links['resource:methods'];
  var methodLink;
  var awsApiMethod;
  var createdMethod = true;

  return new Promise(function(resolve, reject) {

    // create if necessary

    if (!methodLinks) {
      return module.exports.createApiResourceMethod(
        apigw, apiTree, awsResource, apiMethod
      ).then(resolve).catch(reject);
    }

    if (!Array.isArray(methodLinks)) {
      if (methodLinks.name != apiMethod.method) {
        return module.exports.createApiResourceMethod(
          apigw, apiTree, awsResource, apiMethod
        ).then(resolve).catch(reject);
      }
      methodLink = methodLinks;
    }

    else if (
      methodLinks.filter(function(mlink) {
        if (mlink.name == apiMethod.method) {
          methodLink = mlink;
          return true;
        }
        return false;
      }
    ).length == 0) {
      return module.exports.createApiResourceMethod(
        apigw, apiTree, awsResource, apiMethod
      ).then(resolve).catch(reject);
    }

    createdMethod = false;
    updateApiResourceMethod('method: \'%s\', path: \'%s\'', apiMethod.method, awsResource.path);
    resolve();

  })

  .then(function(result) {

    // got created, result is new awsApiMethod
    if (result) return awsApiMethod = result;

    // not created, get awsApiMethod
    return apigw.getRestApiMethod(methodLink)

  })

  .then(function(result) {

    if (createdMethod) return;

    awsApiMethod = result;

    var doUpdate;

    apiMethod.definition._aws_entity = awsApiMethod;

    var method = apiMethod.definition.method;

    if (!method) return doUpdate = false;

    var different = diff(awsApiMethod, method)

    .filter(function(change) {

      if (change.path == '/_deploy') return false;
      if (change.path == '/_links') return false;
      if (change.path == '/_embedded') return false;
      if (change.path == '/_aws_resource') return false;
      if (change.path == '/httpMethod') return false;

      if (change.path == '/requestModels' && change.op == 'add' 
        && Object.keys(change.value).length == 0) return false;
      
      if (change.path == '/requestParameters' && change.op == 'add' 
        && Object.keys(change.value).length == 0) return false;

      return true;

    });

    if (different.length > 0) return doUpdate = true;

    return doUpdate = false;

  })

  .then(function(doUpdate) {

    if (createdMethod) return;

    if (doUpdate) {

      updateApiResourceMethod(
        'UPDATE changed method: \'%s\', path: \'%s\'', apiMethod.method, awsResource.path
      );

      var method = apiMethod.definition.method;

      return apigw.patchRestApiMethod(method, awsApiMethod, awsResource);
    }

    updateApiResourceMethod(
      'SKIP unchanged method: \'%s\', path: \'%s\'', apiMethod.method, awsResource.path
    );

  })

  .then(function(updated) {

    if (updated) apiMethod.definition._aws_entity = awsApiMethod = updated;

    if (awsApiMethod._embedded) {
      if (awsApiMethod._embedded['method:integration']) {
        return awsApiMethod._embedded['method:integration']
      }
    }

  })

  .then(function(awsApiMethodIntegration) {

    // cacheKeyParameters: [],
    // cacheNamespace: 'whw2rb',
    // httpMethod: 'GET',
    // type: 'HTTP',
    // uri: 'https://api.objective.blue',

    var integration = apiMethod.definition.integration;

    // TODO: undeploy integration

    if (!integration) return;

    if (integration.lambda) {
      var lambda = Lambda.load(integration.lambda);

      console.log(lambda);

    }

  })

}


/**
 * ### .createApiResourceMethod(apigw, apiTree, awsResource, apiMethod)
 *
 * Create method on the Api Gateway with method from the apiTree
 *
 * @api private
 * @param {ApiGatewayApi} apigw
 * @param {ApiTree} apiTree
 * @param {AwsRestApiResource} awsResource
 * @param {ApiMethod} apiMethod
 * @returns {Promise}
 *
 */

module.exports.createApiResourceMethod = function(apigw, apiTree, awsResource, apiMethod) {

  createApiResourceMethod('method: \'%s\', path: \'%s\'', apiMethod.method, awsResource.path);

  var definition = apiMethod.definition;
  var method = definition.method;

  var httpMethod = apiMethod.method;
  var awsMethod = {
    authorizationType: method.authorizationType,
    apiKeyRequired: method.apiKeyRequired,
    requestParameters: method.requestParameters,
    requestModels: method.requestModels,
  }

  return apigw.createRestApiMethod(httpMethod, awsMethod, awsResource)

  .then(function(awsMethod) {

    // Add new method to resource listing (messy because it's an array only if more than 1)

    if (Array.isArray(awsResource._links['resource:methods'])) {

      createApiResourceMethod('adding additional method to array');
      awsResource._links['resource:methods'].push(awsMethod._links.self);

    } else if (typeof awsResource._links['resource:methods'] !== 'undefined') {

      createApiResourceMethod('adding second method, become array');
      awsResource._links['resource:methods'] = [
        awsResource._links['resource:methods'],
        awsMethod._links.self
      ];

    } else {

      createApiResourceMethod('adding first method without array');
      awsResource._links['resource:methods'] = awsMethod._links.self;

    }

    method._aws_resource = awsMethod;

    return awsMethod;

  });

}


