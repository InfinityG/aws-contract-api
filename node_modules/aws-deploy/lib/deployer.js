module.exports = Deployer;

var Promise = require('bluebird') // available from parent's modules
  , ApiGatewayApi = require('./aws/api_gateway_api')
  , debug = require('debug')('Deployer') // available from parent's modules
  , deleteApiResourceMethod = require('debug')('Deployer:deleteApiResourceMethod')
  , updateApiResourceMethod = require('debug')('Deployer:updateApiResourceMethod')
  ;


/** 
 * ### .Deployer(config, apiTree)
 *
 * Update AWS Api
 *
 * @api public
 * @param {AwsConfig} config
 * @param {ApiTree} apiTree
 * @returns {Promise}
 *
 */

function Deployer(config, apiTree) {

  var apigw = new ApiGatewayApi(config);

  var found; // api already exists

  return new Promise(function(resolve, reject) {

    /*
     * 1. Get the list of APIs to determine if the api being deployed
     *    already exists.
     */

    debug('get api list');

    apigw.getRestApis().then(function(APIs) {

      APIs.forEach(function(api) {

        debug('found api id:\'%s\', name\'%s\', description\'%s\'', 
          api.id, api.name, api.description);

        if (api.name == apiTree.name) found = api;

      });

    })

    .then(function() {

      if (found) {
        debug('updating api name:\'%s\'', found.name);
        return found;
      }

      debug('creating api name:\'%s\'', api.name);

      return apigw.createRestApi({
        name: apiTree.name,
        description: apiTree.description,
      });

    })

    .then(function(api) {
      
      return module.exports.updateApiResources(apigw, apiTree, api);

    })

    .then(function() {

      // Deploy result contains the input apiTree ammended with deployment details

      resolve(apiTree);

    })

    .catch(reject)

  });
  
}

/**
 * List of 'methods' associated with an AWS Api Gateway resource
 *
 * @typedef AwsLinkRelations
 * @type {object}
 * @property {{href: string}} self - eg { self: { href: '/restapis/1hjovnyjw0' },
 * @property {{href: string, templated: boolean}} repeating method list - eg {'deployment:create': { href: '/restapis/1hjovnyjw0/deployments' },
 *
 */

/**
 * Instance of an AWS Api Gateway RestApi as returned from AWS
 * 
 * @typedef AwsRestApi
 * @type {object}
 * @property {string} id
 * @property {string} name
 * @property {string} description
 * @property {AwsLinkRelations} _links
 *
 */


/**
 * ### .updateApiResources(apigw, apiTree, api)
 *
 * Updates Api Resources ie. routes
 *
 * @api private
 * @param {ApiGatewayApi} apigw
 * @param {ApiTree} apiTree
 * @param {AwsRestApi} api
 * @returns {Promise}
 *
 */

module.exports.updateApiResources = function(apigw, apiTree, api) {

  return new Promise(function(resolve, reject) {

    debug('updating api resources');

    apigw.getRestApiResources({
      id: api.id
    })

    .then(function(resources) {

      debug('found %d existing resource%s', resources.length, resources.length !== 1 ? 's' : '');

      return Promise.map(resources, function(resource) {

        return module.exports.updateApiResource(apigw, apiTree, resource);

      });

    })

    .then(function() {

      resolve();

    })

    .catch(reject);

  });

}

/**
 * Instance of an AWS Api Gateway RestApi resource as returned from AWS
 * 
 * @typedef AwsRestApiResource
 * @type {object}
 * @property {string} id
 * @property {string} parentId
 * @property {string} path
 * @property {string} pathPart
 * @property {AwsLinkRelations} _links
 *
 */

/**
 * ### .updateApiResource(apigw, apiTree, awsResource)
 *
 * Updates existing Api Resource ie. route
 *
 * @api private
 * @param {ApiGatewayApi} apigw
 * @param {ApiTree} apiTree
 * @param {AwsRestApiResource} awsResource
 * @returns {Promise}
 * 
 */

module.exports.updateApiResource = function(apigw, apiTree, awsResource) {

  var allMethods = apiTree.getMethods(awsResource.path);

  if (!allMethods) {

    /*
     * 1. AWS Gateway defines resource not in apiTree, delete it.
     *
     */

    return apigw.deleteRestApiResource(awsResource);

  }

  // Attach aws entity to apiTree at resource location

  apiTree.routes[awsResource.path] = apiTree.routes[awsResource.path] || {};
  apiTree.routes[awsResource.path]._awsentity = awsResource;

  /*
   * 2. Remove methods from resource no longer present in apiTree deployment definition.
   *
   */

  return module.exports.deleteApiResourceMethods(apigw, apiTree, awsResource, allMethods)

  .then(function() {

    return Promise.map(allMethods, function(apiMethod) {

      /*
       * 3. Update or add for each method from apiTree into awsResource
       *
       */

      return module.exports.updateApiResourceMethod(apigw, apiTree, awsResource, apiMethod);

    });

  })

  .then(function() {

    // Mark route as deployed

  });

}


/**
 * ### .deleteApiResourceMethods(apigw, apiTree, awsResource)
 *
 * Delete methods from awsResource not present in apiTree
 *
 * @api private
 * @param {ApiGatewayApi} apigw
 * @param {ApiTree} apiTree
 * @param {AwsRestApiResource} awsResource
 * @param {ApiMethod[]} allMethods
 * @returns {Promise}
 *
 */

module.exports.deleteApiResourceMethods = function(apigw, apiTree, awsResource, allMethods) {

  var deleteMethods;

  try {

    deleteMethods = awsResource._links['resource:methods'];

    if (deleteMethods) {

      if (!Array.isArray(deleteMethods)) deleteMethods = [deleteMethods];

      // Filter for awsResource methods that don't exist in apiTree (allMethods)

      deleteMethods = deleteMethods.filter(function(method) {
        return allMethods.filter(function(m) {
          return m.method == method.name;
        }).length == 0;
      });

    }

    else deleteMethods = [];

  } catch (e) {

    debug('awsResource missing _links');
    deleteMethods = [];

  }

  return Promise.map(deleteMethods, function(method) {

    return module.exports.deleteApiResourceMethod(apigw, awsResource, method)

  });

}


/**
 * Instance of an AWS Api Gateway RestApi method as returned from AWS
 * 
 * @typedef AwsRestApiMethod
 * @type {object}
 * @property {string} href
 * @property {string} name
 * @property {string} title
 *
 */

/**
 * ### .deleteApiResourceMethod(apigw, apiTree, awsResource, method)
 *
 * Delete specific method from awsResource
 *
 * @api private
 * @param {ApiGatewayApi} apigw
 * @param {AwsRestApiResource} awsResource
 * @param {AwsRestApiMethod} method
 * @returns {Promise}
 *
 */

module.exports.deleteApiResourceMethod = function(apigw, awsResource, method) {

  deleteApiResourceMethod('%j', method);

  return apigw.deleteRestApiMethod(method)

  .then(function() {

    // Remove method from resource listing

    if (Array.isArray(awsResource._links['resource:methods'])) {

      var remove = awsResource._links['resource:methods'].filter(function(m) {
        return method.href != m.href;
      });

      if (remove.length == 1) awsResource._links['resource:methods'] = remove[0];
      else awsResource._links['resource:methods'] = remove;
    }

    else if (awsResource._links['resource:methods'].href == method.href) {
      delete awsResource._links['resource:methods']
    }

  });

}


/**
 * ### .updateApiResourceMethod(apigw, apiTree, awsResource, apiMethod)
 *
 * Updates methods on the Api Gateway with methods from the apiTree
 *
 * @api private
 * @param {ApiGatewayApi} apigw
 * @param {ApiTree} apiTree
 * @param {AwsRestApiResource} awsResource
 * @param {ApiMethod} apiMethod
 * @returns {Promise}
 *
 */

module.exports.updateApiResourceMethod = function(apigw, apiTree, awsResource, apiMethod) {

  // console.log('apiMethod', apiMethod, awsResource);
  updateApiResourceMethod();

}






