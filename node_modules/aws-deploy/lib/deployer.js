module.exports = Deployer;

var Promise = require('bluebird'); // available from parent's modules
var ApiGatewayApi = require('./aws/api_gateway_api');
var debug = require('debug')('Deployer'); // available from parent's modules


/** 
 * ### .Deployer(config, defn)
 *
 * Update AWS Api
 *
 * @api public
 * @param {AwsConfig} config
 * @param {AwsApiTree} defn
 * @returns {Promise}
 *
 */

function Deployer(config, defn) {

  var apigw = new ApiGatewayApi(config);

  var found; // api already exists

  return new Promise(function(resolve, reject) {

    /*
     * 1. Get the list of APIs to determine if the api being deployed
     *    already exists.
     */

    debug('get api list');

    apigw.getRestApis().then(function(APIs) {

      APIs.forEach(function(api) {

        debug('found api id:\'%s\', name\'%s\', description\'%s\'', 
          api.id, api.name, api.description);

        if (api.name == defn.name) found = api;

      });

    })

    .then(function() {

      if (found) {
        debug('updating api name:\'%s\'', found.name);
        return found;
      }

      debug('creating api name:\'%s\'', api.name);

      return apigw.createRestApi({
        name: api.name,
        description: api.description,
      });

    })

    .then(function(api) {
      
      return module.exports.updateApiResources(apigw, defn, api);

    })

    .catch(reject)

  });
  
}

/**
 * List of 'methods' associated with an AWS Api Gateway resource
 *
 * @typedef AwsLinkRelations
 * @type {object}
 * @property {{href: string}} self - eg { self: { href: '/restapis/1hjovnyjw0' },
 * @property {{href: string, templated: boolean}} repeating method list - eg {'deployment:create': { href: '/restapis/1hjovnyjw0/deployments' },
 *
 */

/**
 * Instance of an AWS Api Gateway RestApi as returned from AWS
 * 
 * @typedef AwsRestApi
 * @type {object}
 * @property {string} id
 * @property {string} name
 * @property {string} description
 * @property {AwsLinkRelations} _links
 *
 */


/**
 * ### .updateApiResources(apigw, defn, api)
 *
 * Updates Api Resources ie. routes
 *
 * @api private
 * @param {ApiGatewayApi} apigw
 * @param {AwsApiTree} defn
 * @param {AwsRestApi} api
 *
 */

module.exports.updateApiResources = function(apigw, defn, api) {

  return new Promise(function(resolve, reject) {

    debug('updating api resources');

    apigw.getRestApiResources({
      id: api.id
    })

    .then(function(resources) {

      debug('found %d existing resource%s', resources.length, resources.length !== 1 ? 's' : '');

      resolve();

    })

    .catch(reject);

  });

}


