/**
 * # Lambda
 *
 * Provides the necessary functionality to build a lambda zip file given
 * only the javascript file that defines the lambda
 *
 */


module.exports = Lambda;

var Promise = require('bluebird')
  , fs = require('fs')
  , os = require('os')
  , path = require('path')
  , AdmZip = require('adm-zip')
  , debug = require('debug')('Lambda')
  ;

// Cache of loaded lambdas

var cache = {};


/**
 * ## load(jsFile)
 *
 * Loads new or return Lambda instance from cache.
 * 
 * @api public
 * @param {String} jsFile
 *
 */

module.exports.load = function(jsFile) {

  return cache[jsFile] || (cache[jsFile] = new Lambda(jsFile));

}


/**
 * ## Lambda(jsFile)
 *
 * Lambda instance.
 *
 * @api public
 * @constructor
 * @param {String} jsFile
 *
 */

function Lambda(jsFile) {

  debug('create lambda: \'%s\'', jsFile)

  this.file = jsFile;
  this.name = jsFile.replace('/\.js$/', '');

  Object.defineProperty(this, 'content', {
    value: fs.readFileSync(jsFile).toString()
  });

  this.modules = this.content.split(os.EOL) // Windows??

  // remove comments

  .map(function(line) {
    var place = line.indexOf('//');
    if (place < 0) return line;
    return line.substr(0, place);
  })

  // find require("thing") or require('thing')

  .map(function(line) {
    var match = line.match(/require\('(.*)'\)/);
    if (match) return match[1];
    match = line.match(/require\("(.*)"\)/);
    if (match) return match[1];
  })

  // remove where none found on line

  .filter(function(name) {
    return !!name;
  })

  // and filter out ./files and ./dirs

  .filter(function(name) {
    if (name[0] == '.') return false;
    return true;
  })

  // and ensure specified node modules are installed

  .map(function(name) {
    debug('requires module: \'%s\'', name);
    try {
      fs.statSync('node_modules' + path.sep + name)
    } catch (e) {
      throw new Error('missing \'node_modules/' + name + '\' needed by \'' + jsFile + '\'');
    }
    return name;
  });

  this.zip();

}


/**
 * ### .zip()
 *
 * Zip the lambda files and directories.
 *
 * @api public
 *
 */

Lambda.prototype.zip = function() {

  if (this.base64) {
    debug('already ziped for lambda: ', this.file);
  }

  debug('creating zip for lambda: ', this.file);

  var _this = this;

  var zip = new AdmZip();

  // Include modules and api directory

  this.modules.map(function(name) {
    return process.cwd() + path.sep + 'node_modules' + path.sep + name;
  }).concat(process.cwd() + path.sep + 'api')

  .forEach(function(name) {
    var directory = path.relative(process.cwd(), name);
    debug('adding directory: \'%s\'',directory);
    zip.addLocalFolder(directory, directory);
  })

  zip.writeZip(process.cwd() + path.sep + 'tmp' + path.sep + _this.file + '.zip');

  Object.defineProperty(_this, 'base64', {
    value: zip.toBuffer().toString('base64')
  });

}
