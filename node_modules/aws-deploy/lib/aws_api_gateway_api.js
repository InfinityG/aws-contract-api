module.exports = AwsApiGatewayApi;

require('./_extends');

var Promise = require('bluebird') // available from parent's modules
  , aws4 = require('aws4')
  , format = require('util').format
  , https = require('https')
  ;

// AWS SDK does not include access to API Gateway


function AwsApiGatewayApi(config) {

  this.region = config.aws_region;
  this.accessKeyId = config.aws_access_key_id;
  this.secretAccessKey = config.aws_secret_access_key;
  this.host = format('apigateway.%s.amazonaws.com', this.region);

}


AwsApiGatewayApi.prototype.createRequest = function(opts) {
  var headers, date = new Date();

  opts.host = this.host;
  headers = opts.headers = opts.headers || {};
  headers['X-Amz-Date'] = date.toISO8601String();
  headers['Content-Type'] = 'application/x-amz-json-1.0';

  aws4.sign(opts, this);

  return opts;
}


AwsApiGatewayApi.prototype.performRequest = function(opts) {
  return new Promise(function(resolve, reject) {
    https.request(opts, function(res) {

      var response = {
        statusCode: res.statusCode,
        headers: res.headers,
        body: '',
        data: null
      };

      res.on('data', function(data) {
        response.body += data.toString();
      });

      res.on('end', function() {
        if (response.headers['content-type'].match(/json/)) {
          response.data = JSON.parse(response.body);
        }

        if (response.statusCode >= 400) return reject( response);
        if (response.statusCode >= 300) return reject( response); // hmm
        if (response.statusCode >= 200) return resolve(response);

      });

    }).end();
  });
}


AwsApiGatewayApi.prototype.formatResponse = function(response) {

  // the array or instance returned
  result = response.data._embedded.item;
  
  // the original http response as hidden property of the result
  Object.defineProperty(result, '_response', {
    value: response
  });

  return result;

}


AwsApiGatewayApi.prototype.getRestApis = function() {
  var _this = this;
  return new Promise(function(resolve, reject) {

    var opts = _this.createRequest({
      method: 'GET',
      path: '/restapis',
    });

    _this.performRequest(opts)
    
    .then(function(response) {
      resolve(_this.formatResponse(response));

    })

    .catch(reject);

  });
}


