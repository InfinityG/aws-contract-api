module.exports = ApiTree;

var ApiHandler = require('./api_handler');
var httpMethods = ['OPTIONS', 'GET', 'HEAD', 'POST', 'PUT'];


/**
 * ### ApiTree(tree)
 *
 * Api definition tree
 *
 * @constructor
 * @api private
 * @param {Object} tree
 *
 */

function ApiTree(tree) {

  this.name = tree.name;
  this.description = tree.description;
  this.routes = tree.routes;

  this.setDeployStatus();

}


/**
 * ### .getHandlers(path)
 *
 * Get route handler definition
 *
 * @api public
 * @param {String} path
 * @returns {ApiHandler[]}
 *
 */

ApiTree.prototype.getHandlers = function(path) {

  if (!this.routes[path]) {

    // Returning null means resource will be deleted at AWS Api Gateway
    // so if this path is not specifically defined but forms parent
    // of some other path, retun empty list of handlers

    if (this.isParentRoute(path)) return [];

    return;
  }

  var route = this.routes[path];

  return httpMethods.filter(function(method) {

    return !!route[method];

  }).map(function(method) {

    return new ApiHandler({
      path: path,
      method: method,
      definition: route[method]
    });

  });

}


/**
 * ### .isParentRoute(path)
 *
 * Is parent of some other route
 *
 * ie.   /users is parent of /users/username/glimph
 *
 */

ApiTree.prototype.isParentRoute = function(path) {

  for (var route in this.routes) {

    if (route.indexOf(path) == 0) return true;

  }

  return false;

}


/**
 * ### .setDeployStatus(tree)
 *
 * Set status object onto each handler method. Used by deploy to determine actions.
 *
 * @api private
 *
 */

ApiTree.prototype.setDeployStatus = function() {

  var _this = this;
  Object.keys(this.routes).forEach(function(path) {

    // mark as deployed or not

    var def = _this.routes[path];
    def._deploy = def._deploy || {};
    def._deploy.done = typeof def._deploy.done == 'boolean' ? def._deploy.done : false;

    // also mark each method

    httpMethods.forEach(function(leopard) {

      if (!def[leopard]) return;

      var method = def[leopard];
      method._deploy = method._deploy || {};
      method._deploy.done = typeof method._deploy.done == 'boolean' ? method._deploy.done : false;

    });

  });

}

