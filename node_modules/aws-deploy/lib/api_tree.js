module.exports = ApiTree;

var ApiMethod = require('./api_method');
var httpMethods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT'];


/**
 * ### ApiTree(tree)
 *
 * Api definition tree
 *
 * @constructor
 * @api private
 * @param {Object} tree
 * @param {Object} deployRecord - saved apiTree with accumulated results from previous deploys
 *
 */

function ApiTree(tree, deployRecord) {

  this.name = tree.name;
  this.description = tree.description;
  this.routes = tree.routes;

  this.setDeployStatus(deployRecord);

}


/**
 * ### .getMethods(path)
 *
 * Get route handler definition
 *
 * @api public
 * @param {String} path
 * @returns {ApiMethod[]}
 *
 */

ApiTree.prototype.getMethods = function(path) {

  if (!this.routes[path]) {

    // Returning null means resource will be deleted at AWS Api Gateway
    // so if this path is not specifically defined but forms the parent
    // of some other path, retun empty list of methods

    if (this.isParentRoute(path)) return [];

    return;
  }

  var route = this.routes[path];

  return httpMethods.filter(function(method) {

    return !!route[method];

  }).map(function(method) {

    return new ApiMethod({
      path: path,
      method: method,
      definition: route[method]
    });

  });

}


/**
 * ### .isParentRoute(path)
 *
 * Is parent of some other route
 *
 * ie.   /users is parent of /users/username/glimph
 *
 */

ApiTree.prototype.isParentRoute = function(path) {

  for (var route in this.routes) {

    if (route.indexOf(path) == 0) return true;

  }

  return false;

}


/**
 * ### .setDeployStatus(deployRecord)
 *
 * Load record from previous deployment into this deployment
 * to preserve history.
 *
 * @api private
 * @params {Object} deployRecord
 *
 */

ApiTree.prototype.setDeployStatus = function(deployRecord) {

  var _this = this;
  Object.keys(this.routes).forEach(function(path) {

    // mark as deployed or not

    var def = _this.routes[path];
    var recordDef;
    try {
      recordDef = deployRecord.routes[path];
    } catch (e) {}
    def._deploy = def._deploy || {};

    // preserve history from previous deployment
    if (recordDef) {
      Object.keys(recordDef._deploy).forEach(function(key) {
        def._deploy[key] = recordDef._deploy[key];
      });
    }

    def._deploy.done = false;

    // also mark each method

    httpMethods.forEach(function(httpMethod) {

      if (!def[httpMethod]) return;

      // ensure method

      def[httpMethod].method = def[httpMethod].method || {};

      var method = def[httpMethod].method;
      var recordMethod;
      try {
        recordMethod = deployRecord.routes[path][httpMethod].method;
      } catch (e) {}
      method._deploy = method._deploy || {};

      if (recordMethod && recordMethod._deploy) {
        Object.keys(recordMethod._deploy).forEach(function(key) {
          def._deploy[key] = recordMethod._deploy[key];
        });
      }

      method._deploy.done = false;

    });

  });

}

