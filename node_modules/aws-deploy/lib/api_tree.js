module.exports = ApiTree;

var ApiHandler = require('./api_handler');


/**
 * ### ApiTree(tree)
 *
 * Api definition tree
 *
 * @constructor
 * @api private
 * @param {Object} tree
 *
 */

function ApiTree(tree) {

  /*
   *  ### example tree
   *  
   *  ```javascript
   *  {
   *    name: 'Api Name',
   *    description: 'Api Description',
   *    root: {
   *      _methods: {
   *        GET: {
   *          // define handler for GET /
   *        }
   *      }
   *      'users': {
   *        _methods: {
   *          GET: {
   *            // define handler for GET /users
   *          }
   *        }
   *        ':id': {
   *          _methods: {
   *            GET: {
   *              // define handler for GET /users/:id
   *            }
   *          }
   *        }
   *      }
   *    }
   *  }
   *  ```
   *
   */

  Object.defineProperty(this, '_root', {value: tree.root});

  this.name = tree.name;
  this.description = tree.description;


}


/**
 * ### .getHandlers(path)
 *
 * Get route handler definition
 *
 * @api public
 * @param {String} path
 * @returns {ApiHandler[]}
 *
 */

ApiTree.prototype.getHandlers = function(path) {

  var pathArray = path.split('/');

  pathArray.shift();

  var walk = function(remainingPath, pointer) {
    var next;
    if (!pointer) return;
    if (next = remainingPath.shift()) return walk(remainingPath, pointer[next]);
    return pointer;
  }

  var def = walk(pathArray, this._root);

  if (!def) return;

  if (!def._methods) return;

  return Object.keys(def._methods).map(function(method) {

    return new ApiHandler({
      path: path,
      method: method,
      definition: def._methods[method]
    });

  });

}