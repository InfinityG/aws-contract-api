module.exports = Api;


var Promise = require('bluebird') // available from parent's modules
  , aws4 = require('aws4') // available from parent's modules
  , request = require('request') // available from parent's modules
  , format = require('util').format
  , https = require('https')
  , debug = require('debug')
  , formatServerError = debug('Api:formatServerError')
  , formatClientError = debug('Api:formatClientError')
  , redirect = debug('Api:redirect')
  , formatSuccess = debug('Api:formatSuccess')
  , performRequest = debug('Api:performRequest')
  , seq = 0
  ;


function Api(config, name) {

  this.region = config.aws_region;
  this.accessKeyId = config.aws_access_key_id;
  this.secretAccessKey = config.aws_secret_access_key;

  this.host = format(name + '.%s.amazonaws.com', this.region);

}


Api.prototype.createRequest = function(opts) {

  var headers, date = new Date();

  opts.host = this.host;
  headers = opts.headers = opts.headers || {};
  headers['X-Amz-Date'] = date.toISO8601String();
  headers['Content-Type'] = 'application/x-amz-json-1.0';

  // Perform AWS signature version 4
  // http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
  // https://github.com/mhart/aws4

  aws4.sign(opts, this);

  return opts;

}


Api.prototype.formatServerError = function(sequence, response) {

  // statusCode 5xx TODO

  formatServerError('\tseq:%s', sequence);

  var error = new Error(response.statusCode);

  error._response = response;

  return error;
}


Api.prototype.formatClientError = function(sequence, response) {

  // statusCode 4xx TODO
  
  formatClientError('\tseq:%s', sequence);

  var error = new Error(response.statusCode);

  error._response = response;

  return error;
}


Api.prototype.redirect = function(sequence, response) {

  // statusCode 3xx TODO
  
  redirect('\tseq:%s', sequence);

  var error = new Error('Redirect not supported');
  
  error._response = response;

  return error;
}


Api.prototype.formatSuccess = function(sequence, response, asArray) {

  // statusCode 2xx
  
  formatSuccess('\tseq:%s', sequence);

  var result;

  if (response.data) {
    if (response.data._embedded && response.data._embedded.item) {
      // result from get or search containing instance or array
      result = response.data._embedded.item;
    } 
    else {
      // result from create (or update?)
      result = response.data
    }
  }
  else result = asArray ? [] : {};

  if (asArray && !Array.isArray(result)) result = [result];
  
  Object.defineProperty(result, '_response', {
    value: response
  });

  return result;
}


Api.prototype.performRequest = function(opts, asArray) {
  var _this = this;
  
  return new Promise(function(resolve, reject) {

    opts.url = format('https://%s%s', opts.host, opts.path);

    var repeat = function(sequence) {

      performRequest('\tseq:%s - %s https://%s%s body: %s', sequence, opts.method, opts.host, opts.path, opts.body);

      request(opts, function(err, res, body) {

        if (err) return reject(err);

        performRequest('\tseq:%s - response statusCode: %d', sequence, res.statusCode);

        var response = {
          statusCode: res.statusCode,
          headers: res.headers,
          body: body
        };

        if (response.headers['content-type'] && response.headers['content-type'].match(/json/)) {
          response.data = JSON.parse(response.body);
        }

        if (response.statusCode >= 500) {
          return reject(_this.formatServerError(sequence, response));
        }

        // Handle 'rate limit hit' on the Api Gateway Api, backoff and repeat.
        if (response.statusCode == 429) {

          var seqs = sequence.split(':');
          var repeats = parseInt(seqs[1]);
          var newSequence = format('%s:%d', seqs[0], ++repeats);
          performRequest('\tseq:%s - hit rate limit - pending seq:%s in %dms', sequence, newSequence, 1000);
          return setTimeout(function() {
            repeat(newSequence)
          }, 1000);
        }

        if (response.statusCode >= 400) {
          return reject(_this.formatClientError(sequence, response));
        }

        if (response.statusCode >= 300) {
          return reject(_this.redirect(sequence, opts, response));
        }

        if (response.statusCode >= 200) {
          return resolve(_this.formatSuccess(sequence, response, asArray));
        }

        return reject(new Error('unexpected statusCode ' + response.statusCode));

      });

    };

    // First call, repeats if rate limited

    repeat(format('%d:%d', ++seq, 0));

  });
}


Api.prototype.removePatchNulls = function(paths, patch) {
  for (var i = patch.length - 1; i >= 0; i--) {
    if (paths.indexOf(patch[i].path) >= 0) {
      if (patch[i].op == 'add') {
        if (Object.keys(patch[i].value).length == 0) {
          patch.splice(i, 1);
        }
      }
    }
  }
}

Api.prototype.removePatchIgnores = function(paths, patch) {
  for (var i = patch.length - 1; i >= 0; i--) {
    if (paths.indexOf(patch[i].path) >= 0) {
      patch.splice(i, 1);
    }
  }
}

Api.prototype.stringifyPatchBools = function(patch) {
  patch.forEach(function(op) {
    if (typeof op.value == 'boolean') op.value = op.value.toString();
  })
}
