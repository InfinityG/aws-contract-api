module.exports = Api;


var Promise = require('bluebird') // available from parent's modules
  , aws4 = require('aws4') // available from parent's modules
  , request = require('request') // available from parent's modules
  , format = require('util').format
  , https = require('https')
  , debug = require('debug')
  , formatServerError = debug('Api:formatServerError')
  , formatClientError = debug('Api:formatClientError')
  , redirect = debug('Api:redirect')
  , formatSuccess = debug('Api:formatSuccess')
  , performRequest = debug('Api:performRequest')
  , seq = 0
  ;


function Api(config) {

  this.region = config.aws_region;
  this.accessKeyId = config.aws_access_key_id;
  this.secretAccessKey = config.aws_secret_access_key;

  this.host = format('apigateway.%s.amazonaws.com', this.region);

}


Api.prototype.createRequest = function(opts) {

  var headers, date = new Date();

  opts.host = this.host;
  headers = opts.headers = opts.headers || {};
  headers['X-Amz-Date'] = date.toISO8601String();
  headers['Content-Type'] = 'application/x-amz-json-1.0';

  // if (opts.body) {
  //   headers['Content-Length'] = opts.body.length;
  // }

  aws4.sign(opts, this);

  return opts;

}


Api.prototype.formatServerError = function(sequence, response) {

  // statusCode 5xx TODO

  formatServerError('%d', sequence);

  var error = new Error(response.statusCode);

  error._response = response;

  return error;
}


Api.prototype.formatClientError = function(sequence, response) {

  // statusCode 4xx TODO
  
  formatClientError('%d', sequence);

  var error = new Error(response.statusCode);

  error._response = response;

  return error;
}


Api.prototype.redirect = function(sequence, response) {

  // statusCode 3xx TODO
  
  redirect('%d', sequence);

  var error = new Error('Redirect not supported');
  
  error._response = response;

  return error;
}


Api.prototype.formatSuccess = function(sequence, response) {

  // statusCode 2xx
  
  formatSuccess('%d', sequence);

  var result;

  if (response.data) {
    if (response.data._embedded && response.data._embedded.item) {
      // result from get or search containing instance or array
      result = response.data._embedded.item;
    } 
    else {
      // result from create (or update?)
      result = response.data
    }
  }
  else result = {};
  
  Object.defineProperty(result, '_response', {
    value: response
  });

  return result;
}


Api.prototype.performRequest = function(opts) {
  var _this = this;
  var sequence = seq++;
  
  performRequest('%d %s https://%s%s body: %s', sequence, opts.method, opts.host, opts.path, opts.body);
  
  return new Promise(function(resolve, reject) {

    opts.url = format('https://%s%s', opts.host, opts.path);

    request(opts, function(err, res, body) {

      performRequest('%d response statusCode: %d', sequence, res.statusCode);

      var response = {
        statusCode: res.statusCode,
        headers: res.headers,
        body: body
      };

      if (response.headers['content-type'] && response.headers['content-type'].match(/json/)) {
        response.data = JSON.parse(response.body);
      }

      if (response.statusCode >= 500) {
        return reject(_this.formatServerError(sequence, response));
      }

      if (response.statusCode >= 400) {
        return reject(_this.formatClientError(sequence, response));
      }

      if (response.statusCode >= 300) {
        return reject(_this.redirect(sequence, opts, response));
      }

      if (response.statusCode >= 200) {
        return resolve(_this.formatSuccess(sequence, response));
      }

      return reject(new Error('unexpected statusCode ' + response.statusCode));

    });

  });
}

