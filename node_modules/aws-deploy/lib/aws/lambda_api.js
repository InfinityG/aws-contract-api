module.exports = LambdaApi;

var Api = require('./api')
  , inherits = require('util').inherits
  , getFunction = require('debug')('LambdaApi:getFunction')
  , createFunction = require('debug')('LambdaApi:createFunction')
  , updateFunctionConfiguration = require('debug')('LambdaApi:updateFunctionConfiguration')
  , updateFunctionCode = require('debug')('LambdaApi:updateFunctionCode')
  , addPermission = require('debug')('LambdaApi:addPermission')
  , removePermission = require('debug')('LambdaApi:removePermission')
  ;


function LambdaApi(config) {
  Api.call(this, config, 'lambda');
}


inherits(LambdaApi, Api);


/**
 * ### .getFunction(lambda)
 *
 * Gets the AWS function definition for this lambda
 *
 * @api public
 * @param {Lambda} lambda
 * @returns {Promise}
 *
 */

LambdaApi.prototype.getFunction = function(lambda) {

  getFunction('for lambda: \'%s\'', lambda.name);

  var request = this.createRequest({
    method: 'GET',
    path: '/2015-03-31/functions/' + lambda.name,
  });

  return this.performRequest(request);

}


/**
 * ### .createFunction(lambda)
 *
 * Creates the AWS function definition for this lambda
 *
 * @api public
 * @param {Lambda} lambda
 * @returns {Promise}
 *
 */

LambdaApi.prototype.createFunction = function(lambda) {

  createFunction('for lambda: \'%s\'', lambda.name);

  var request = this.createRequest({
    method: 'POST',
    path: '/2015-03-31/functions',
    body: JSON.stringify(lambda.toCreateFunction()),
  });

  return this.performRequest(request);

}


/**
 * ### .updateFunctionConfiguration(lambda)
 *
 * Creates the AWS function definition for this lambda
 *
 * @api public
 * @param {Lambda} lambda
 * @returns {Promise}
 *
 */

LambdaApi.prototype.updateFunctionConfiguration = function(lambda) {

  updateFunctionConfiguration('for lambda: \'%s\'', lambda.name);

  var request = this.createRequest({
    method: 'PUT',
    path: '/2015-03-31/functions/' + lambda.name + '/configuration',
    body: JSON.stringify(lambda.toUpdateFunctionConfiguration()),
  });

  return this.performRequest(request);

}




/**
 * ### .updateFunctionCode(lambda)
 *
 * Creates the AWS function definition for this lambda
 *
 * @api public
 * @param {Lambda} lambda
 * @returns {Promise}
 *
 */

LambdaApi.prototype.updateFunctionCode = function(lambda) {

  updateFunctionCode('for lambda: \'%s\'', lambda.name);

  var request = this.createRequest({
    method: 'PUT',
    path: '/2015-03-31/functions/' + lambda.name + '/code',
    body: JSON.stringify(lambda.toUpdateFunctionCode()),
  });

  return this.performRequest(request);

}


/**
 * ### .addPermission()
 *
 * Adds permission for api gateway resource to run lambda.
 * 
 * @api public
 * @param {Lambda} lambda
 * @param {AwsRestApi} awsRestApi
 * @param {AwsRestApiResource} awsResource
 * @param {AwsRestApiMethod} awsApiMethod
 * @returns {Promise}
 *
 */

LambdaApi.prototype.addPermission = function(lambda, awsRestApi, awsResource, awsApiMethod) {

  addPermission('for lambda: \'%s\', method: \'%s\', path: \'%s\'', lambda.name, awsApiMethod.httpMethod, awsResource.path);

  var body = lambda.toAddPermission(awsRestApi, awsResource, awsApiMethod);

  var request = this.createRequest({
    method: 'POST',
    path: '/2015-03-31/functions/' + lambda.name + '/policy',
    body: JSON.stringify(body),
  });

  return this.performRequest(request);

}


/**
 * ### .removePermission()
 *
 * Removes permission for api gateway resource to run lambda.
 * 
 * @api public
 * @param {Lambda} lambda
 * @param {AwsPermission} permission
 * @param {AwsRestApiResource} awsResource
 * @param {AwsRestApiMethod} awsApiMethod
 * @returns {Promise}
 *
 */

LambdaApi.prototype.removePermission = function(lambda, permission, awsResource, awsApiMethod) {

  removePermission('for lambda: \'%s\', method: \'%s\', path: \'%s\'', lambda.name, awsApiMethod.httpMethod, awsResource.path);

  var lambdaName = permission.Resource.split(':').pop();

  var request = this.createRequest({
    method: 'DELETE',
    path: '/2015-03-31/functions/' + lambdaName + '/policy/' + permission.Sid,
  });

  return this.performRequest(request);

}


