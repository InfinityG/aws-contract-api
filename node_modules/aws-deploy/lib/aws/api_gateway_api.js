// AWS SDK does not include access to API Gateway

module.exports = ApiGatewayApi;


var Api = require('./api')
  , inherits = require('util').inherits
  , format = require('util').format
  , diff = require('fast-json-patch').compare
  , getRestApis = require('debug')('ApiGatewayApi:getRestApis')
  , getRestApiModels = require('debug')('ApiGatewayApi:getRestApiModels')
  , patchRestApiModel = require('debug')('ApiGatewayApi:patchRestApiModel')
  , createRestApiModel = require('debug')('ApiGatewayApi:createRestApiModel')
  , deleteRestApiModel = require('debug')('ApiGatewayApi:deleteRestApiModel')
  , createRestApi = require('debug')('ApiGatewayApi:createRestApi')
  , createRestApiResource = require('debug')('ApiGatewayApi:createRestApiResource')
  , getRestApiResources = require('debug')('ApiGatewayApi:getRestApiResources')
  , deleteRestApiResource = require('debug')('ApiGatewayApi:deleteRestApiResource')
  , getRestApiMethod = require('debug')('ApiGatewayApi:getRestApiMethod')
  , createRestApiMethod = require('debug')('ApiGatewayApi:createRestApiMethod')
  , patchRestApiMethod = require('debug')('ApiGatewayApi:patchRestApiMethod')
  , deleteRestApiMethod = require('debug')('ApiGatewayApi:deleteRestApiMethod')
  , createRestApiMethodIntegration = require('debug')('ApiGatewayApi:createRestApiMethodIntegration')
  , patchRestApiMethodIntegration = require('debug')('ApiGatewayApi:patchRestApiMethodIntegration')
  , createRestApiDeployment = require('debug')('ApiGatewayApi:createRestApiDeployment')
  ;


function ApiGatewayApi(config) {
  Api.call(this, config, 'apigateway');
}


inherits(ApiGatewayApi, Api);


/**
 * ### .getRestApis()
 *
 * List all APIs for the given region/account
 *
 * @api public
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.getRestApis = function() {

  getRestApis('');

  var request = this.createRequest({
    method: 'GET',
    path: '/restapis',
  });

  return this.performRequest(request, true);

}


/**
 * ### .createRestApi(props)
 *
 * Create a new API
 *
 * @api public
 * @param {{name: String, description: String}} props
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.createRestApi = function(props) {

  createRestApi('%j', props);

  var request = this.createRequest({
    method: 'POST',
    path: '/restapis',
    body: JSON.stringify(props),
  });

  return this.performRequest(request);

}


/**
 * ### .getRestApiModels(awsRestApi)
 *
 * @api public
 * @param {AwsRestApi} awsRestApi
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.getRestApiModels = function(awsRestApi) {

  getRestApiModels('get models for api: \'%s\', id: \'%s\'', awsRestApi.name, awsRestApi.id);

  if (!awsRestApi._links || !awsRestApi._links['restapi:models']) {
    throw new Error('invalid AwsRestApi in getRestApiModels()');
  }

  var request = this.createRequest({
    method: 'GET',
    path: awsRestApi._links['restapi:models'].href
  });

  return this.performRequest(request);

}


/**
 * ### .patchRestApiModel(awsModel, patch)
 *
 * @api public
 * @param {AwsRestApiModel} awsModel
 * @param {JsonPatch} patch
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.patchRestApiModel = function(awsModel, patch) {

  patchRestApiModel('name: \'%s\'', awsModel.name);

  if (!awsModel._links || !awsModel._links['model:update']) {
    throw new Error('invalid AwsRestApiModel in patchRestApiModel()');
  }

  var request = this.createRequest({
    method: 'PATCH',
    path: awsModel._links['model:update'].href,
    body: JSON.stringify({patchOperations: patch})
  });

  return this.performRequest(request);

}


/**
 * ### .createRestApiModel(awsModel, patch)
 *
 * @api public
 * @param {AwsRestApi} awsRestApi
 * @param {{name: String, description: String, schema: String, contentType: String}} props
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.createRestApiModel = function(awsRestApi, props) {

  createRestApiModel('name: \'%s\'', props.name);

  if (!awsRestApi._links || !awsRestApi._links['model:create']) {
    throw new Error('invalid AwsRestApi in createRestApiModel()');
  }

  var request = this.createRequest({
    method: 'POST',
    path: awsRestApi._links['model:create'].href,
    body: JSON.stringify(props)
  });

  return this.performRequest(request);

}


/**
 * ### .deleteRestApiModel(awsModel, patch)
 *
 * @api public
 * @param {AwsRestApiModel} awsModel
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.deleteRestApiModel = function(awsModel) {

  deleteRestApiModel('name: \'%s\'', awsModel.name);

  if (!awsModel._links || !awsModel._links['model:delete']) {
    throw new Error('invalid AwsRestApiModel in deleteRestApiModel()');
  }

  var request = this.createRequest({
    method: 'DELETE',
    path: awsModel._links['model:delete'].href,
  });

  return this.performRequest(request);

}


/**
 * ### .createRestApiResource(props, parent)
 *
 * @api public
 * @param {{pathPart: String}} props
 * @param {AwsRestApiResource} parent
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.createRestApiResource = function(props, parent) {

  createRestApiResource('%j', props);

  var request = this.createRequest({
    method: 'POST',
    path: parent._links['resource:create-child'].href,
    body: JSON.stringify(props),
  });

  return this.performRequest(request);

}


/**
 * ### .getRestApiResources(props)
 *
 * Get list of API resources.
 *
 * ie. routes
 *
 * @api public
 * @param {{id: String, limit: Number}} props
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.getRestApiResources = function(props) {

  props.limit = props.limit || 100;

  getRestApiResources('%j', props);

  var request = this.createRequest({
    method: 'GET',
    path: format('/restapis/%s/resources?limit=%d', props.id, props.limit),
  });

  return this.performRequest(request, true);

}


/**
 * ### .deleteRestApiResource(resource)
 *
 * Delete resource
 *
 * @api public
 * @param {AwsRestApiResource} resource
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.deleteRestApiResource = function(resource) {

  deleteRestApiResource('id: \'%s\', path: \'%s\'', resource.id, resource.path);

  if (!resource._links || !resource._links['resource:delete']) {
    throw new Error('invalid AwsRestApiResource in deleteRestApiResource()');
  }

  var request = this.createRequest({
    method: 'DELETE',
    path: resource._links['resource:delete'].href,
  });

  return this.performRequest(request);

}


/**
 * ### .createRestApiMethod(httpMethod, method, resource)
 *
 * @api public
 * @param {String} httpMethod
 * @param {AwsRestApiMethod} method
 * @param {AwsRestApiResource} resource
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.createRestApiMethod = function(httpMethod, method, resource) {

  createRestApiMethod('method: \'%s\', path: \'%s\', method: \'%j\'', httpMethod, resource.path, method);

  if (!resource._links || !resource._links['method:put']) {
    throw new Error('invalid AwsRestApiResource in createRestApiMethod()');
  }

  var request = this.createRequest({
    method: 'PUT',
    path: resource._links['method:put'].href.replace(/\{http_method\}/, httpMethod),
    body: JSON.stringify(method),
  });

  return this.performRequest(request);

}


/**
 * ### .getRestApiMethod(methodLink)
 *
 * @api public
 * @param {AwsRestApiMethodLink} methodLink
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.getRestApiMethod = function(methodLink) {

  getRestApiMethod('href: \'%s\'', methodLink.href);

  if (!methodLink || !methodLink.href) {
    throw new Error('invalid AwsRestApiMethodLink in getRestApiMethod()');
  }

  var request = this.createRequest({
    method: 'GET',
    path: methodLink.href,
  });

  return this.performRequest(request);

}


/**
 * ### .patchRestApiMethod(method, targetMethod)
 *
 * @api public
 * @param {AwsRestApiMethod} method
 * @param {AwsRestApiMethod} awsApiMethod
 * @param {AwsRestApiResource} resource
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.patchRestApiMethod = function(method, awsApiMethod, resource) {

  patchRestApiMethod('method: \'%s\', path: \'%s\'', awsApiMethod.httpMethod, resource.path);

  if (!awsApiMethod._links || !awsApiMethod._links.self) {
    throw new Error('invalid AwsRestApiMethod in patchRestApiMethod()');
  }

  var changeables = awsApiMethod.excludeKeys([
    '_links',
    '_embedded',
    'httpMethod',
  ]);

  var patch = diff(changeables, method.excludeKeys([
    '_aws',
    '_log',
    'responses',
  ]));

  this.removePatchNulls(['/requestModels', '/requestParameters'], patch);
  this.stringifyPatchBools(patch);

  var request = this.createRequest({
    method: 'PATCH',
    path: awsApiMethod._links.self.href,
    body: JSON.stringify({ patchOperations: patch }),
  });

  return this.performRequest(request);

}


/**
 * ### .deleteRestApiMethod(methodLink)
 *
 * @api public
 * @param {AwsRestApiMethodLink} methodLink
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.deleteRestApiMethod = function(methodLink) {

  deleteRestApiMethod('href: \'%s\'', methodLink.href);

  if (!methodLink || !methodLink.href) {
    throw new Error('invalid AwsRestApiMethodLink in deleteRestApiMethod()');
  }

  var request = this.createRequest({
    method: 'DELETE',
    path: methodLink.href,
  });

  return this.performRequest(request);
  
}


/**
 * ### .patchRestApiMethodResponse(awsMethodResponse, patch)
 *
 * @api public
 * @param {AwsRestApiMethodResponse} awsMethodResponse
 * @param {JsonPatch} patch
 *
 */

ApiGatewayApi.prototype.patchRestApiMethodResponse = function(awsMethodResponse, patch) {

  if (!awsMethodResponse._links || !awsMethodResponse._links['methodresponse:update']) {
    throw new Error('invalid AwsRestApiMethodResponse in patchRestApiMethodResponse()');
  }

  this.stringifyPatchBools(patch);

  var request = this.createRequest({
    method: 'PATCH',
    path: awsMethodResponse._links['methodresponse:update'].href,
    body: JSON.stringify({ patchOperations: patch }),
  });

  return this.performRequest(request);

}


/**
 * ### .patchRestApiMethodResponse(awsMethodResponse, patch)
 *
 * @api public
 * @param {AwsRestApiMethodResponse} awsMethodResponse
 *
 */

ApiGatewayApi.prototype.deleteRestApiMethodResponse = function(awsMethodResponse) {

  if (!awsMethodResponse._links || !awsMethodResponse._links['methodresponse:delete']) {
    throw new Error('invalid AwsRestApiMethodResponse in patchRestApiMethodResponse()');
  }

  var request = this.createRequest({
    method: 'DELETE',
    path: awsMethodResponse._links['methodresponse:delete'].href,
  });

  return this.performRequest(request);

}

/**
 * Instance of an AWS Api Gateway HTTP method integration
 * 
 * @typedef AwsRestApiMethodIntegration
 * @type {object}
 * @property {string} type
 * @property {string} httpMethod
 * @property {string} uri
 * @property {string} credentials
 * @property {{key: String}[]} requestParameters
 * @property {{key: String}[]} requestTemplates
 * @property {String} cacheNamespace
 * @property {String[]} cacheKeyParameters
 *
 */


/**
 * ### .createRestApiMethodIntegration = function(integration, awsApiMethod, resource)
 *
 * @api public
 * @param {{}} integration
 * @param {AwsRestApiMethod} awsApiMethod
 * @param {AwsRestApiResource} resource
 * $returns {Promise}
 *
 */

ApiGatewayApi.prototype.createRestApiMethodIntegration = function(integration, awsApiMethod, resource) {

  createRestApiMethodIntegration('method: \'%s\', path: \'%s\'', awsApiMethod.httpMethod, resource.path);

  if (!awsApiMethod._links || !awsApiMethod._links['integration:put']) {
    throw new Error('invalid AwsRestApiMethod in createRestApiMethodIntegration()');
  }

  var request = this.createRequest({
    method: 'PUT',
    path: awsApiMethod._links['integration:put'].href,
    body: JSON.stringify(integration.excludeKeys(['_log', '_aws', 'lambda']))
  });

  return this.performRequest(request);

}


/**
 * ### .patchRestApiMethodIntegration = function(integration, awsApiMethod, resource)
 *
 * @api public
 * @param {{}} integration
 * @param {AwsRestApiMethodIntegration} integration
 * @param {AwsRestApiMethod} awsApiMethod
 * @param {AwsRestApiResource} resource
 * $returns {Promise}
 *
 */

ApiGatewayApi.prototype.patchRestApiMethodIntegration = function(integration, awsApiMethodIntegration, awsApiMethod, resource) {

  patchRestApiMethodIntegration('method: \'%s\', path: \'%s\'', awsApiMethod.httpMethod, resource.path);

  if (!awsApiMethodIntegration._links || !awsApiMethodIntegration._links.self) {
    throw new Error('invalid AwsApiMethodIntegration in patchRestApiMethodIntegration()');
  }

  var changeables = awsApiMethodIntegration.excludeKeys([
    '_links',
    '_embedded',
    'cacheNamespace', // If we start using the cache, remove this.
    'credentials',
  ]);

  var patch = diff(changeables, integration.excludeKeys([
    'cacheNamespace', // If we start using the cache, remove this.
    'credentials',
    '_log',
    '_aws',
    'lambda',
    '_permission'
  ]));

  this.removePatchNulls(['/requestParameters', '/requestTemplates'], patch);

  if (integration.lambda) {
    this.removePatchIgnores(['/httpMethod'], patch);
  }

  var request = this.createRequest({
    method: 'PATCH',
    path: awsApiMethodIntegration._links.self.href,
    body: JSON.stringify({ patchOperations: patch }),
  });

  return this.performRequest(request);

}


/**
 * ### .createRestApiDeployment(apiTree, awsRestApi)
 *
 * @api public
 * @param {ApiTree} apiTree
 * @param {AwsRestApi} awsRestApi
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.createRestApiDeployment = function(apiTree, awsRestApi) {

  createRestApiDeployment('create deployment \'%s\'', apiTree.deploy.stage + apiTree.deploy.version);

  if (!awsRestApi._links || !awsRestApi._links['deployment:create']) {
    throw new Error('invalid awsRestApi in createRestApiDeployment()');
  }

  apiTree.deployment.stageName = apiTree.deploy.stage + apiTree.deploy.version;


  var request = this.createRequest({
    method: 'POST',
    path: awsRestApi._links['deployment:create'].href,
    body: JSON.stringify(apiTree.deployment.excludeKeys(['_log', '_aws']))
  });

  return this.performRequest(request);

}

