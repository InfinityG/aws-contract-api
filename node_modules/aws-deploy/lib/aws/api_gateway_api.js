// AWS SDK does not include access to API Gateway

module.exports = ApiGatewayApi;


var Api = require('./api')
  , inherits = require('util').inherits
  , format = require('util').format
  , diff = require('fast-json-patch').compare
  , getRestApis = require('debug')('ApiGatewayApi:getRestApis')
  , createRestApi = require('debug')('ApiGatewayApi:createRestApi')
  , createRestApiResource = require('debug')('ApiGatewayApi:createRestApiResource')
  , getRestApiResources = require('debug')('ApiGatewayApi:getRestApiResources')
  , deleteRestApiResource = require('debug')('ApiGatewayApi:deleteRestApiResource')
  , getRestApiMethod = require('debug')('ApiGatewayApi:getRestApiMethod')
  , createRestApiMethod = require('debug')('ApiGatewayApi:createRestApiMethod')
  , patchRestApiMethod = require('debug')('ApiGatewayApi:patchRestApiMethod')
  , deleteRestApiMethod = require('debug')('ApiGatewayApi:deleteRestApiMethod')
  ;


function ApiGatewayApi(config) {
  Api.call(this, config);
}


inherits(ApiGatewayApi, Api);


/**
 * ### .getRestApis()
 *
 * List all APIs for the given region/account
 *
 * @api public
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.getRestApis = function() {

  getRestApis('');

  var request = this.createRequest({
    method: 'GET',
    path: '/restapis',
  });

  return this.performRequest(request);

}


/**
 * ### .createRestApi(props)
 *
 * Create a new API
 *
 * @api public
 * @param {{name: String, description: String}} props
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.createRestApi = function(props) {

  createRestApi('%j', props);

  var request = this.createRequest({
    method: 'POST',
    path: '/restapis',
    body: JSON.stringify(props),
  });

  return this.performRequest(request);

}


/**
 * ### .createRestApiResource(props, parent)
 *
 * @api public
 * @param {{pathPart: String}} props
 * @param {AwsRestApiResource} parent
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.createRestApiResource = function(props, parent) {

  createRestApiResource('%j', props);

  var request = this.createRequest({
    method: 'POST',
    path: parent._links['resource:create-child'].href,
    body: JSON.stringify(props),
  });

  return this.performRequest(request);

}


/**
 * ### .getRestApiResources(props)
 *
 * Get list of API resources.
 *
 * ie. routes
 *
 * @api public
 * @param {{id: String, limit: Number}} props
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.getRestApiResources = function(props) {

  props.limit = props.limit || 100;

  getRestApiResources('%j', props);

  var request = this.createRequest({
    method: 'GET',
    path: format('/restapis/%s/resources?limit=%d', props.id, props.limit),
  });

  return this.performRequest(request, true);

}


/**
 * ### .deleteRestApiResource(resource)
 *
 * Delete resource
 *
 * @api public
 * @param {AwsRestApiResource} resource
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.deleteRestApiResource = function(resource) {

  deleteRestApiResource('id: \'%s\', path: \'%s\'', resource.id, resource.path);

  if (!resource._links || !resource._links['resource:delete']) {
    throw new Error('invalid AwsRestApiResource in deleteRestApiResource()');
  }

  var request = this.createRequest({
    method: 'DELETE',
    path: resource._links['resource:delete'].href,
  });

  return this.performRequest(request);

}


/**
 * ### .createRestApiMethod(httpMethod, method, resource)
 *
 * @api public
 * @param {String} httpMethod
 * @param {AwsRestApiMethod} method
 * @param {AwsRestApiResource} resource
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.createRestApiMethod = function(httpMethod, method, resource) {

  createRestApiMethod('method: \'%s\', path: \'%s\', method: \'%j\'', httpMethod, resource.path, method);

  if (!resource._links || !resource._links['method:put']) {
    throw new Error('invalid AwsRestApiResource in createRestApiMethod()');
  }

  var request = this.createRequest({
    method: 'PUT',
    path: resource._links['method:put'].href.replace(/\{http_method\}/, httpMethod),
    body: JSON.stringify(method),
  });

  return this.performRequest(request);

}


/**
 * ### .getRestApiMethod(methodLink)
 *
 * @api public
 * @param {AwsRestApiMethodLink} methodLink
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.getRestApiMethod = function(methodLink) {

  getRestApiMethod('href: \'%s\'', methodLink.href);

  if (!methodLink || !methodLink.href) {
    throw new Error('invalid AwsRestApiMethodLink in getRestApiMethod()');
  }

  var request = this.createRequest({
    method: 'GET',
    path: methodLink.href,
  });

  return this.performRequest(request);

}


/**
 * ### .patchRestApiMethod(method, targetMethod)
 *
 * @api public
 * @param {AwsRestApiMethod} method
 * @param {AwsRestApiMethod} awsApiMethod
 * @param {AwsRestApiResource} resource
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.patchRestApiMethod = function(method, awsApiMethod, resource) {

  patchRestApiMethod('method: \'%s\', path: \'%s\'', awsApiMethod.httpMethod, resource.path);

  if (!awsApiMethod._links || !awsApiMethod._links.self) {
    throw new Error('invalid AwsRestApiMethod in patchRestApiMethod()');
  }

  var patchOps = diff(awsApiMethod, method)

  .filter(function(change) {

    if (change.path == '/_deploy') return false;
    if (change.path == '/_links') return false;
    if (change.path == '/httpMethod') return false;

    if (change.path == '/requestModels' && change.op == 'add' 
      && Object.keys(change.value).length == 0) return false;
    
    if (change.path == '/requestParameters' && change.op == 'add' 
      && Object.keys(change.value).length == 0) return false;

    return true;

  }).map(function(change) {
    if (typeof change.value == 'boolean') change.value = change.value.toString();
    return change;
  });

  var request = this.createRequest({
    method: 'PATCH',
    path: awsApiMethod._links.self.href,
    body: JSON.stringify({ patchOperations: patchOps }),
  });

  return this.performRequest(request);

}


/**
 * ### .deleteRestApiMethod(methodLink)
 *
 * @api public
 * @param {AwsRestApiMethodLink} methodLink
 * @returns {Promise}
 *
 */

ApiGatewayApi.prototype.deleteRestApiMethod = function(methodLink) {

  deleteRestApiMethod('href: \'%s\'', methodLink.href);

  if (!methodLink || !methodLink.href) {
    throw new Error('invalid AwsRestApiMethodLink in deleteRestApiMethod()');
  }

  var request = this.createRequest({
    method: 'DELETE',
    path: methodLink.href,
  });

  return this.performRequest(request);
  
}


